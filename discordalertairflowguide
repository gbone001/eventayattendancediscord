Step-by-Step: Discord Alert on Airflow Task Failure
üõ†Ô∏è 1. Create a Discord Webhook
In Discord:

Go to your server‚Äôs settings ‚Üí Integrations

Choose or create a channel ‚Üí Create Webhook

Copy the webhook URL

üß¨ 2. Create Python Alert Function
python
import requests

DISCORD_WEBHOOK = "https://discord.com/api/webhooks/XXXX/XXXX"

def send_discord_alert(context):
    task_name = context.get("task_instance").task_id
    dag_name = context.get("dag").dag_id
    error_msg = context.get("exception")

    message = {
        "username": "Apollo Bot Monitor",
        "content": f"üö® Task **{task_name}** in DAG **{dag_name}** failed!\n```\n{error_msg}\n```"
    }

    requests.post(DISCORD_WEBHOOK, json=message)
Save this in a file like alerts.py or add to your DAG module.

üì¶ 3. Add on_failure_callback to Tasks
In your DAG definition:

python
from alerts import send_discord_alert

export_attendance = PythonOperator(
    task_id="export_attendance",
    python_callable=run_export,
    on_failure_callback=send_discord_alert
)

backup_csv = BashOperator(
    task_id="backup_csv",
    bash_command=f"elastio backup {EXPORT_PATH} --tag apollo-{EVENT_ID}",
    on_failure_callback=send_discord_alert
)
You can also add it at the DAG level:

python
with DAG(
    dag_id="apollo_attendance_export_dag",
    start_date=datetime(2025,7,20),
    schedule_interval="30 23 * * *",
    catchup=False,
    default_args={
        "on_failure_callback": send_discord_alert
    }
) as dag:
This gives you real-time failure notifications in your Discord server ‚Äî perfect for keeping eyes on attendance sync and backup reliability. Want to expand alerts for task success too or pipe them into a mod log channel? I can show you that next.

